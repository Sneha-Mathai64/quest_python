demonstrate the difference of adding elements to a list and different ways to delete elements from a list

Adding Elements to a List
1.Using append() Method: Adds an element to the end of the list.
numbers = [1, 2, 3]
numbers.append(4)
print(numbers)  # Output: [1, 2, 3, 4]

2. Using extend() Method: Adds all elements from an iterable (like another list) to the end of the list.

numbers = [1, 2, 3]
numbers.extend([4, 5])
print(numbers)  # Output: [1, 2, 3, 4, 5]

3. Using insert() Method:Inserts an element at a specific position in the list.
numbers = [1, 2, 3]
numbers.insert(1, 1.5)  # Insert 1.5 at index 1
print(numbers)  # Output: [1, 1.5, 2, 3]

4.Using List Concatenation: Concatenates lists to create a new list with additional elements.
numbers = [1, 2, 3]
numbers = numbers + [4, 5]
print(numbers)  # Output: [1, 2, 3, 4, 5]
 
 Deleting Elements from a List
 1. Using remove() Method: Removes the first occurrence of a specified value. Raises an error if the value is not found.
    numbers = [1, 2, 3, 2, 4]
numbers.remove(2)  # Removes the first occurrence of 2
print(numbers)  # Output: [1, 3, 2, 4]

2. Using pop() Method:

Removes and returns the element at a specific index. If no index is provided, removes and returns the last element.
 numbers = [1, 2, 3, 4]
removed_element = numbers.pop(1)  # Removes the element at index 1
print(numbers)  # Output: [1, 3, 4]
print(f"Removed element: {removed_element}")  # Output: Removed element: 2

3.Using del Statement: Deletes an element at a specific index or deletes the entire list.
numbers = [1, 2, 3, 4]
del numbers[2]  # Deletes the element at index 2
print(numbers)  # Output: [1, 2, 4]
4. Using List Comprehension: Creates a new list by including elements that satisfy a certain condition, effectively removing unwanted elements.
numbers = [1, 2, 3, 4, 5]
numbers = [x for x in numbers if x % 2 != 0]  # Keep only odd numbers
print(numbers)  # Output: [1, 3, 5]

List comprehension in Python is a concise way to create lists. 
It provides a more readable and expressive syntax compared to traditional for-loops. 
List comprehensions are used to generate lists by applying an expression to each item in an iterable, often with optional conditions.
List Comprehension
[x**2 for x in range(10)]

step1: [ ]
We are saying, we need a list

step2: x ** 2
elements of the list will be x ** 2

step3: for x in range(10)
values for x will be supplied from the for loop
-----------------------------
squares2 = [x**2 for x in range(10)]
print('Squares2 = ', squares2)
--------------------------------------
Using Map and Lambda Function:

squares3 = list(map(lambda x: x**2, range(10)))
print('Squares3 = ', squares3)

list slicing
List slicing in Python refers to accessing a subset of elements from a list using a specific syntax. 
It allows you to create a new list that is a portion of the original list by specifying a start, stop, and step index. 
This is done using the slice notation.
syntax: list[start:stop:step]
start: The index where the slice begins (inclusive). If omitted, it defaults to the beginning of the list.
stop: The index where the slice ends (exclusive). If omitted, it defaults to the end of the list.
step: The interval between elements in the slice. If omitted, it defaults to 1.